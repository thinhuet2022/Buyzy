version: '3.8'

services:
  mysql-user:
    image: mysql:8
    container_name: mysql-user
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: user_service_db
    ports:
      - "3306:3306"
    volumes:
      - mysql-user-data:/var/lib/mysql
    networks:
      - backend

  mysql-product:
    image: mysql:8
    container_name: mysql-product
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: product_service_db
    ports:
      - "3308:3306"
    volumes:
      - mysql-product-data:/var/lib/mysql
    networks:
      - backend

  mysql-order:
    image: mysql:8
    container_name: mysql-order
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: order_service_db
    ports:
      - "3307:3306"
    volumes:
      - mysql-order-data:/var/lib/mysql
    networks:
      - backend

  user-service:
    build:
      context: ./backend/user-service   # nơi chứa Dockerfile và mã nguồn Spring Boot
    container_name: user-service
    depends_on:
      - mysql-user
    ports:
      - "8081:8081"
    volumes:
      - ./backend/user-service:/app # Mount mã nguồn vào container
      - ~/.m2:/root/.m2 # Mount thư mục .m2 để cache các dependency
    working_dir: /app    # Đặt thư mục làm việc là nơi chứa code
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - JAVA_OPTS=-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true # Enable hot reload
      - SPRING_PROFILES_ACTIVE=dev # Chọn profile dev
      - PORT=8081
      - DB_HOST=mysql-user
      - DB_PORT=3306
      - DB_NAME=user_service_db
      - DB_USER=root
      - DB_PASSWORD=root
      - GMAIL_USERNAME=${GMAIL_USERNAME}
      - GMAIL_PASSWORD=${GMAIL_PASSWORD}
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    networks:
      - backend

  product-service:
    build:
      context: ./backend/product-service   # nơi chứa Dockerfile và mã nguồn Spring Boot
    container_name: product-service
    depends_on:
      - mysql-product
    ports:
      - "8082:8082"
    volumes:
      - ./backend/product-service:/app # Mount mã nguồn vào container
      - ~/.m2:/root/.m2     # dùng cache Maven

    working_dir: /app    # Đặt thư mục làm việc là nơi chứa code
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - JAVA_OPTS=-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true # Enable hot reload
      - SPRING_PROFILES_ACTIVE=dev # Chọn profile dev
      - PORT=8082
      - DB_HOST=mysql-product
      - DB_PORT=3306
      - DB_NAME=product_service_db
      - DB_USER=root
      - DB_PASSWORD=root
      - CLOUDINARY_CLOUD_NAME=${CLOUDINARY_CLOUD_NAME}
      - CLOUDINARY_API_KEY=${CLOUDINARY_API_KEY}
      - CLOUDINARY_API_SECRET=${CLOUDINARY_API_SECRET}
    networks:
      - backend

  order-service:
    build:
        context: ./backend/order-service   # nơi chứa Dockerfile và mã nguồn Spring Boot
    container_name: order-service
    depends_on:
      - mysql-order
    ports:
      - "8083:8083"
    volumes:
      - ./backend/order-service:/app # Mount mã nguồn vào container
      - ~/.m2:/root/.m2     # dùng cache Maven
    working_dir: /app    # Đặt thư mục làm việc là nơi chứa code
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - JAVA_OPTS=-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true # Enable hot reload
      - SPRING_PROFILES_ACTIVE=dev # Chọn profile dev
      - PORT=8083
      - DB_HOST=mysql-order
      - DB_PORT=3306
      - DB_NAME=order_service_db
      - DB_USER=root
      - DB_PASSWORD=root
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=8082
      - VNPAY_URL=${VNPAY_URL}
      - VNPAY_TMN_CODE=${VNPAY_TMN_CODE}
      - VNPAY_HASH_SECRET=${VNPAY_HASH_SECRET}
      - VNPAY_RETURN_URL=${VNPAY_RETURN_URL}
      - PAYMENT_RESULT_URL=${PAYMENT_RESULT_URL}
    networks:
      - backend

  api-gateway:
    build:
      context: ./backend/api-gateway   # nơi chứa Dockerfile và mã nguồn Spring Boot
    container_name: api-gateway
    depends_on: # Chờ các service khác khởi động
      - user-service
    #      - product-service
    #      - order-service
    ports:
      - "8080:8080"
    volumes:
      - ./backend/api-gateway:/app # Mount mã nguồn vào container
      - ~/.m2:/root/.m2     # dùng cache Maven
    working_dir: /app    # Đặt thư mục làm việc là nơi chứa code
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - JAVA_OPTS=-Dspring.devtools.restart.enabled=true -Dspring.devtools.livereload.enabled=true # Enable hot reload
      - SPRING_PROFILES_ACTIVE=dev # Chọn profile dev
      - PORT=8080
      - FRONT_END_HOST=localhost
      - USER_SERVICE_HOST=user-service
      - USER_SERVICE_PORT=8081
      - PRODUCT_SERVICE_HOST=product-service
      - PRODUCT_SERVICE_PORT=8082
      - ORDER_SERVICE_HOST=order-service
      - ORDER_SERVICE_PORT=8083
    networks:
      - backend
  frontend:
    build:
      context: ./frontend   # nơi chứa Dockerfile và mã nguồn React
      dockerfile: Dockerfile.dev
    container_name: frontend
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app # Mount mã nguồn vào container
      - /app/node_modules # Để tránh mount lại thư mục node_modules
    working_dir: /app    # Đặt thư mục làm việc là nơi chứa code
    environment:
      - TZ=Asia/Ho_Chi_Minh
      - VITE_API_URL=http://localhost:8080/api/v1
    networks:
      - backend


volumes:
  mysql-user-data:
  mysql-product-data:
  mysql-order-data:

networks:
  backend:
    driver: bridge # Tạo mạng riêng cho các service